// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"V11/models"
)

// RegisterUserOKCode is the HTTP code returned for type RegisterUserOK
const RegisterUserOKCode int = 200

/*RegisterUserOK Sucessfull Registeration

swagger:response registerUserOK
*/
type RegisterUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.SuccessResponseDefinition `json:"body,omitempty"`
}

// NewRegisterUserOK creates RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {

	return &RegisterUserOK{}
}

// WithPayload adds the payload to the register user o k response
func (o *RegisterUserOK) WithPayload(payload *models.SuccessResponseDefinition) *RegisterUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user o k response
func (o *RegisterUserOK) SetPayload(payload *models.SuccessResponseDefinition) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserBadRequestCode is the HTTP code returned for type RegisterUserBadRequest
const RegisterUserBadRequestCode int = 400

/*RegisterUserBadRequest server could not understand the request due to invalid syntax

swagger:response registerUserBadRequest
*/
type RegisterUserBadRequest struct {
}

// NewRegisterUserBadRequest creates RegisterUserBadRequest with default headers values
func NewRegisterUserBadRequest() *RegisterUserBadRequest {

	return &RegisterUserBadRequest{}
}

// WriteResponse to the client
func (o *RegisterUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
